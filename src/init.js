// Generated by CoffeeScript 1.10.0
(function() {
  require(['App', 'Base', 'Island', 'Rectangle', 'MiniMap', 'Cursor', 'Route', 'Port', 'Ship', 'Islands', 'Nodes', 'Ships', 'Routes', 'Menu'], function(app, Base, Island, Rectangle, MiniMap, Cursor, Route, Port, Ship, Islands, Nodes, Ships, Routes, Menu) {
    var canvas;
    console.log('init');
    canvas = document.getElementById('game');
    canvas.width = app.state.view.w;
    canvas.height = app.state.view.h;
    app.ctx = canvas.getContext('2d');
    app.calculateMap();
    app.linksData = JSON.parse(Base.doXhr('data/links.json').responseText);
    app.registerCollection(new Islands(JSON.parse(Base.doXhr('data/islands.json').responseText)), 1);
    app.registerCollection(new Nodes(JSON.parse(Base.doXhr('data/nodes.json').responseText)), 3);
    app.registerCollection(new Routes(JSON.parse(Base.doXhr('data/edges.json').responseText)), 2);
    app.getCollection('islands').registerGeometries();
    app.getCollection('routes').registerGeometries();
    app.menu = new Menu();
    app.cursor = new Cursor();
    app.registerCollection(new Ships([], 10));
    app.getCollection('ships').createShip();
    app.loop();
    canvas.addEventListener('mousedown', function(e) {
      app.state.controls.mouseClicked = true;
      app.state.controls.mouseClickedPosition = {
        x: e.clientX,
        y: e.clientY
      };
    });
    canvas.addEventListener('mouseup', function(e) {
      app.state.controls.mouseClicked = false;
    });
    canvas.addEventListener('mousemove', function(e) {
      var mcp, zoom;
      app.state.controls.mousePosition = {
        x: e.clientX,
        y: e.clientY
      };
      if (app.state.controls.mouseClicked && app.mouseOverMap()) {
        zoom = app.state.zoom;
        mcp = app.state.controls.mouseClickedPosition;
        app.setNewYPosition(app.state.position.y + (mcp.y - e.clientY) * 1 / zoom);
        app.setNewXPosition(app.state.position.x + (mcp.x - e.clientX) * 1 / zoom);
        app.state.controls.mouseClickedPosition = {
          x: e.clientX,
          y: e.clientY
        };
      }
    });
    return canvas.addEventListener('mouseout', function(e) {
      app.state.controls.mouseClicked = false;
      app.state.controls.mouseClickedPosition = {
        x: e.clientX,
        y: e.clientY
      };
    });
  });

}).call(this);
