// Generated by CoffeeScript 1.10.0
(function() {
  define('Menu', ['App', 'MiniMap', 'Text', 'Button'], function(app, MiniMap, Text, Button) {
    var Menu;
    return Menu = (function() {
      function Menu() {
        this.h = 150;
        this.w = app.state.view.w;
        this.x = 0;
        this.y = app.state.view.h - this.h;
        this.mm = new MiniMap();
        this.lw = 2;
        this.texts = [];
        this.buttons = [];
        this.init();
        return;
      }

      Menu.prototype.buttonStyles = {
        speed: {
          inactive: {
            stroke: 'black',
            fill: 'white',
            text: 'black',
            lw: 2
          },
          active: {
            stroke: 'black',
            fill: 'grey',
            text: 'black',
            lw: 2
          }
        }
      };

      Menu.prototype.init = function() {
        var bs, gameSpeed;
        bs = _.clone(this.buttonStyles);
        this.registerText('datum', {
          x: this.w - this.mm.w - 200,
          y: this.h - 25 + this.y
        }, this.getDatumValue);
        gameSpeed = app.state.game.time.timeSpeed;
        this.registerButton('speed0', {
          x: this.w - this.mm.w - 75,
          y: this.h - 25 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '||'), this.changeSpeed0.bind(this), bs['speed'], gameSpeed === 0);
        this.registerButton('speed1', {
          x: this.w - this.mm.w - 50,
          y: this.h - 25 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '>'), this.changeSpeed1.bind(this), bs['speed'], gameSpeed === 1);
        this.registerButton('speed2', {
          x: this.w - this.mm.w - 25,
          y: this.h - 25 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '>>'), this.changeSpeed2.bind(this), bs['speed'], gameSpeed === 2);
        this.registerButton('zoomIn', {
          x: this.w - this.mm.w - 25,
          y: this.h - 50 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '+'), this.zoomIn.bind(this), bs['speed'], gameSpeed === 2);
        this.registerButton('zoomOut', {
          x: this.w - this.mm.w - 50,
          y: this.h - 50 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '-'), this.zoomOut.bind(this), bs['speed'], gameSpeed === 2);
      };

      Menu.prototype.changeSpeed0 = function() {
        this.getButton('speed0').activate();
        this.getButton('speed1').deactivate();
        this.getButton('speed2').deactivate();
        app.state.game.time.timeSpeed = 0;
      };

      Menu.prototype.changeSpeed1 = function() {
        this.getButton('speed0').deactivate();
        this.getButton('speed1').activate();
        this.getButton('speed2').deactivate();
        app.state.game.time.timeSpeed = 1;
      };

      Menu.prototype.changeSpeed2 = function() {
        this.getButton('speed0').deactivate();
        this.getButton('speed1').deactivate();
        this.getButton('speed2').activate();
        app.state.game.time.timeSpeed = 2;
      };

      Menu.prototype.zoomOut = function() {
        app.zoomOut();
      };

      Menu.prototype.zoomIn = function() {
        app.zoomIn();
      };

      Menu.prototype.makeStaticText = function(text) {
        return text;
      };

      Menu.prototype.getDatumValue = function() {
        return 'year: ' + app.state.game.time.year + ' BC, month: ' + _.floor(app.state.game.time.month);
      };

      Menu.prototype.getButton = function(buttonId) {
        return _.find(this.buttons, (function(_this) {
          return function(button) {
            return button.id === buttonId;
          };
        })(this));
      };

      Menu.prototype.draw = function() {
        _.each(this.buttons, (function(_this) {
          return function(button, b) {
            return button.isClicked();
          };
        })(this));
        app.ctx.lineWidth = this.lw;
        app.ctx.fillStyle = 'white';
        app.ctx.strokeStyle = 'black';
        app.ctx.fillRect(this.x, this.y, this.w, this.h);
        app.ctx.strokeRect(this.x + this.lw / 2, this.y + this.lw / 2, this.w - this.lw, this.h - this.lw);
        _.each(this.texts, (function(_this) {
          return function(text, t) {
            return text.draw();
          };
        })(this));
        _.each(this.buttons, (function(_this) {
          return function(button, b) {
            return button.draw();
          };
        })(this));
        this.mm.draw();
      };

      Menu.prototype.mouseConflict = function() {
        var mouseX, mouseY;
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        return mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h;
      };

      Menu.prototype.registerText = function(id, position, text) {
        this.texts.push(new Text(id, position, text));
      };

      Menu.prototype.registerButton = function(id, position, text, action, style, active) {
        this.buttons.push(new Button(id, position, text, action, style, active));
      };

      return Menu;

    })();
  });

}).call(this);
