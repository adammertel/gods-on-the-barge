// Generated by CoffeeScript 1.10.0
(function() {
  define('MiniMap', ['App'], function(app) {
    var MiniMap;
    return MiniMap = (function() {
      function MiniMap() {
        this.h = 150;
        this.w = app.state.map.w / app.state.map.h * this.h;
        this.x = app.state.view.w - this.w;
        this.y = app.state.view.h - this.h;
        this.lw = 2;
        this.dx = this.w / app.state.map.w;
        this.dy = this.h / app.state.map.h;
        return;
      }

      MiniMap.prototype.coordinateToMiniMap = function(c) {
        return {
          x: this.x + this.dx * c.x,
          y: this.y + this.dy * c.y
        };
      };

      MiniMap.prototype.draw = function() {
        var islands, mh, mmCoord, mw, x1, y1;
        app.ctx.save();
        app.ctx.fillStyle = 'white';
        app.ctx.fillRect(this.x, this.y, this.w, this.h);
        app.ctx.lineWidth = this.lw;
        app.ctx.strokeStyle = 'black';
        app.ctx.beginPath();
        app.ctx.moveTo(this.x, this.y);
        app.ctx.lineTo(this.x + this.w, this.y);
        app.ctx.lineTo(this.x + this.w, this.y + this.h);
        app.ctx.lineTo(this.x, this.y + this.h);
        app.ctx.closePath();
        app.ctx.clip();
        islands = app.getCollection('islands');
        _.each(islands.geometries, (function(_this) {
          return function(islandGeometry) {
            app.ctx.fillStyle = 'grey';
            app.ctx.beginPath();
            _.each(islandGeometry.coords, function(coord, c) {
              var mmCoord;
              mmCoord = _this.coordinateToMiniMap({
                x: coord.x,
                y: coord.y
              });
              if (c === 0) {
                return app.ctx.moveTo(mmCoord.x, mmCoord.y);
              } else {
                return app.ctx.lineTo(mmCoord.x, mmCoord.y);
              }
            });
            app.ctx.closePath();
            return app.ctx.fill();
          };
        })(this));
        app.ctx.restore();
        app.ctx.strokeRect(this.x + this.lw / 2, this.y + this.lw / 2, this.w - this.lw, this.h - this.lw);
        app.ctx.fillStyle = 'grey';
        x1 = this.dx * app.state.position.x;
        y1 = this.dy * app.state.position.y;
        mmCoord = this.coordinateToMiniMap({
          x: app.state.position.x,
          y: app.state.position.y
        });
        mw = this.dx * app.state.view.w / app.state.zoom - 2 * this.lw;
        mh = this.dy * app.state.view.h / app.state.zoom - 2 * this.lw;
        app.ctx.strokeRect(mmCoord.x + this.lw, mmCoord.y + this.lw, mw, mh);
      };

      MiniMap.prototype.mouseConflict = function() {
        var mouseX, mouseY;
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        return mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h;
      };

      MiniMap.prototype.mouseClick = function() {
        var mouseX, mouseY;
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        app.setNewXPosition(((mouseX - this.x) / this.w * app.state.map.w) - app.state.view.w / 2);
        return app.setNewYPosition(((mouseY - this.y) / this.h * app.state.map.h) - app.state.view.h / 2);
      };

      return MiniMap;

    })();
  });

}).call(this);
