// Generated by CoffeeScript 1.10.0
(function() {
  define('Geometry', ['Base'], function(Base) {
    var Geometry;
    return Geometry = (function() {
      function Geometry(coords, size, props) {
        this.coords = coords;
        this.size = size;
        this.props = _.assign({
          color: '#666',
          minZoom: 1
        }, props);
        this.rotation = 0;
        this.loadSprite();
        this.loadImage();
        return;
      }

      Geometry.prototype.mouseConflict = function() {
        return false;
      };

      Geometry.prototype.changeColor = function(newColor) {
        this.svg = this.svg.replace(new RegExp(this.color, 'g'), newColor);
        this.color = newColor;
        this.loadImage();
      };

      Geometry.prototype.rotate = function() {
        this.svg = this.svg.replace(new RegExp(/rotate\((\d*)/), 'rotate(' + this.rotation);
        console.log(this.svg);
        this.lastRotation = this.rotation;
      };

      Geometry.prototype.getCoords = function() {
        var hSize;
        hSize = (this.size.w * app.state.zoom) / 2;
        return [
          {
            x: this.coords.x - hSize,
            y: this.coords.y - hSize
          }, {
            x: this.coords.x - hSize,
            y: this.coords.y + hSize
          }, {
            x: this.coords.x + hSize,
            y: this.coords.y + hSize
          }, {
            x: this.coords.x + hSize,
            y: this.coords.y + hSize
          }
        ];
      };

      Geometry.prototype.loadImage = function() {
        this.img = new Image();
        this.img.src = 'data:image/svg+xml;base64,' + btoa(this.svg);
      };

      Geometry.prototype.getPosition = function() {
        return {
          x: (this.x - app.state.position.x) * app.state.zoom,
          y: (this.y - app.state.position.y) * app.state.zoom
        };
      };

      Geometry.prototype.draw = function() {
        var sizeH, sizeW;
        if (app.state.zoom >= this.props.minZoom) {
          sizeW = this.size.w * app.state.zoom;
          sizeH = this.size.h * app.state.zoom;
          if (this.rotation && this.sprite) {
            app.ctx.translate(this.shipCoord.x, this.shipCoord.y);
            app.ctx.rotate(this.rotation);
          }
          app.ctx.drawImage(this.img, -sizeW / 2, -sizeH / 2, sizeW, sizeH);
          if (this.rotation && this.sprite) {
            app.ctx.rotate(-this.rotation);
            app.ctx.translate(-this.shipCoord.x, -this.shipCoord.y);
          }
        }
      };

      Geometry.prototype.loadSprite = function() {
        var xhr;
        if (this.sprite) {
          xhr = Base.doXhr('./sprites/' + this.sprite + '.svg');
          this.svg = new XMLSerializer().serializeToString(xhr.responseXML.documentElement);
        }
      };

      return Geometry;

    })();
  });

}).call(this);
