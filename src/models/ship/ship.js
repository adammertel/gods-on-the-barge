// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Ship', ['Geometry', 'Base'], function(Geometry, Base) {
    var Ship;
    return Ship = (function(superClass) {
      extend(Ship, superClass);

      function Ship() {
        this.startId = app.getCollection('nodes').chooseShipStartingNodeId();
        this.endId = app.getCollection('nodes').chooseShipEndingNodeId();
        this.baseSpeed = 1;
        Ship.__super__.constructor.call(this, app.getCollection('nodes').nodeMapCoordinates(this.startId), {
          w: 10,
          h: 30
        }, {
          minZoom: 0.4
        });
        this.calculateStops();
        this.fullCargo = 1000;
        this.cargo = this.fullCargo;
        this.fullEnergy = 800;
        this.energy = this.fullEnergy;
        return;
      }

      Ship.prototype.getCollection = function() {
        return app.getCollection('ships');
      };

      Ship.prototype.calculateStops = function() {
        this.stops = app.getPath(this.startId, this.endId);
        this.stops.push(parseInt(this.endId));
        this.nextDistance = this.calculateNextDistance();
        this.nextStop = app.getCollection('nodes').nodeMapCoordinates(this.stops[0]);
        this.rotation = this.calculateRotation();
      };

      Ship.prototype.calculateNextDistance = function() {
        return app.getDistanceOfNodes(this.stops[0], this.stops[1]);
      };

      Ship.prototype.move = function() {
        this.energy -= .5;
        if (this.energy < 0) {
          this.suicide();
        }
        this.checkNodeConflict();
        return this.coords = Base.moveTo(this.coords, this.nextStop, this.getSpeed());
      };

      Ship.prototype.checkNodeConflict = function() {
        if (app.getCollection('nodes').checkConflict(this.stops[0], this.coords)) {
          if (this.stops.length > 1) {
            console.log(this.getCollection().findClosePorts(this));
            this.nextDistance = this.calculateNextDistance();
            this.stops = _.slice(this.stops, 1);
            this.nextStop = app.getCollection('nodes').nodeMapCoordinates(this.stops[0]);
            return this.rotation = this.calculateRotation();
          } else {
            return this.suicide();
          }
        }
      };

      Ship.prototype.calculateRotation = function() {
        var dx, dy, theta;
        dy = this.coords.y - this.nextStop.y;
        dx = this.nextStop.x - this.coords.x;
        theta = Math.atan2(-dy, dx);
        if (theta < 0) {
          theta += 2 * Math.PI;
        }
        if (theta > 3 / 2 * Math.PI) {
          theta -= 3 / 2 * Math.PI;
        } else {
          theta += Math.PI / 2;
        }
        return theta;
      };

      Ship.prototype.getSpeed = function() {
        return this.baseSpeed * app.state.game.time.timeSpeed;
      };

      Ship.prototype.drawCargoBar = function() {
        var cargopx, fullCargopx;
        fullCargopx = 40 * app.state.zoom;
        cargopx = (fullCargopx / this.fullCargo) * this.cargo;
        app.ctx.strokeStyle = 'black';
        app.ctx.fillStyle = 'orange';
        app.ctx.strokeRect(this.shipCoord.x - fullCargopx / 2, this.shipCoord.y - fullCargopx / 2, fullCargopx, 3);
        return app.ctx.fillRect(this.shipCoord.x - fullCargopx / 2, this.shipCoord.y - fullCargopx / 2, cargopx, 3);
      };

      Ship.prototype.drawEnergyBar = function() {
        var energypx, fullEnergypx;
        fullEnergypx = 40 * app.state.zoom;
        energypx = (fullEnergypx / this.fullEnergy) * this.energy;
        app.ctx.strokeStyle = 'black';
        app.ctx.fillStyle = 'blue';
        app.ctx.strokeRect(this.shipCoord.x - fullEnergypx / 2, this.shipCoord.y - fullEnergypx / 2 - 6, fullEnergypx, 3);
        return app.ctx.fillRect(this.shipCoord.x - fullEnergypx / 2, this.shipCoord.y - fullEnergypx / 2 - 6, energypx, 3);
      };

      Ship.prototype.draw = function() {
        this.shipCoord = app.coordinateToView(this.coords);
        this.move();
        this.drawEnergyBar();
        this.drawCargoBar();
        Ship.__super__.draw.call(this);
      };

      Ship.prototype.suicide = function() {
        this.getCollection().unregisterGeometry(this.id);
      };

      Ship.prototype.sprite = 'ship';

      return Ship;

    })(Geometry);
  });

}).call(this);
