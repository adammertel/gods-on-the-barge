// Generated by CoffeeScript 1.10.0
(function() {
  define('Base', [], function() {
    var Base;
    return Base = {
      doXhr: function(link) {
        var xhr;
        xhr = new XMLHttpRequest;
        xhr.open('GET', link, false);
        xhr.send('');
        return xhr;
      },
      distance: function(c1, c2) {
        var dx, dy;
        dx = c1.x - c2.x;
        dy = c1.y - c2.y;
        return Math.sqrt(dx * dx + dy * dy);
      },
      moveTo: function(from, to, distance) {
        var d, dist, dist_new, dx, dy;
        dx = to.x - from.x;
        dy = to.y - from.y;
        dist = this.distance(to, from);
        dist_new = distance * app.state.pxkm;
        d = dist_new / dist;
        return {
          x: d * dx + from.x,
          y: d * dy + from.y
        };
      },
      pointInsidePolygon: function(polygon, mouseCoordinates) {
        var inside, polygonCoords, x, y;
        x = mouseCoordinates.x;
        y = mouseCoordinates.y;
        inside = false;
        polygonCoords = polygon.viewCoords;
        _.each(polygonCoords, (function(_this) {
          return function(p, i) {
            var intersect, j, q, xi, xj, yi, yj;
            j = i + 1;
            if (polygonCoords[j]) {
              q = polygonCoords[j];
              xi = p.x;
              yi = p.y;
              xj = q.x;
              yj = q.y;
              intersect = (yi > y) !== (yj > y) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
              if (intersect) {
                return inside = !inside;
              }
            }
          };
        })(this));
        return inside;
      },
      moveAtTheEndOfArray: function(array, index) {
        var item;
        item = array[index];
        array.splice(index, 1);
        array.push(item);
        return array;
      }
    };
  });

}).call(this);
