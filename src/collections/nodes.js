// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Nodes', ['Base', 'Collection', 'Port'], function(Base, Collection, Port) {
    var Nodes;
    return Nodes = (function(superClass) {
      extend(Nodes, superClass);

      function Nodes(data) {
        this.name = 'nodes';
        Nodes.__super__.constructor.call(this, data);
        return;
      }

      Nodes.prototype.limitConflict = 10;

      Nodes.prototype.registerGeometries = function() {
        this.ports = [];
        _.each(_.keys(this.data), (function(_this) {
          return function(nodeId, n) {
            var islandValue;
            islandValue = _this.data[nodeId];
            if (islandValue.island) {
              _this.ports.push(nodeId);
            }
            return _this.addGeometry(new Port(app.coordinateToMap({
              lon: islandValue.x,
              lat: islandValue.y
            }), nodeId, islandValue.island));
          };
        })(this));
      };

      Nodes.prototype.getNode = function(id) {
        return this.data[id];
      };

      Nodes.prototype.nodeMapCoordinates = function(id) {
        var node;
        node = this.getNode(id);
        return app.coordinateToMap({
          lon: node.x,
          lat: node.y
        });
      };

      Nodes.prototype.checkConflict = function(id, coords) {
        return Base.distance(this.nodeMapCoordinates(id), coords) < this.limitConflict;
      };

      Nodes.prototype.getIdOfNode = function(node) {
        var id;
        id = false;
        _.each(_.keys(this.data), (function(_this) {
          return function(nodeKey, k) {
            if (_this.data[nodeKey].x === node.x) {
              return id = nodeKey;
            }
          };
        })(this));
        return id;
      };

      Nodes.prototype.getNodesOnIsland = function(islandName) {
        return _.filter(this.data, function(node, n) {
          return node.island === islandName;
        });
      };

      Nodes.prototype.getAllPorts = function() {
        return _.filter(this.data, function(node, n) {
          return node.island !== '';
        });
      };

      Nodes.prototype.chooseShipStartingNodeId = function() {
        return this.getIdOfNode(_.sample(this.getShipStartingNodes()));
      };

      Nodes.prototype.chooseShipEndingNodeId = function() {
        return this.getIdOfNode(_.sample(this.getShipEndingNodes()));
      };

      Nodes.prototype.getShipStartingNodes = function() {
        return this.getNodesOnIsland('Egypt');
      };

      Nodes.prototype.getShipEndingNodes = function() {
        return _.union(this.getNodesOnIsland('Greece'), this.getNodesOnIsland('Turkey'));
      };

      return Nodes;

    })(Collection);
  });

}).call(this);
