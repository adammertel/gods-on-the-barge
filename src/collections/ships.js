// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Ships', ['Base', 'Collection', 'Ship'], function(Base, Collection, Ship) {
    var Nodes;
    return Nodes = (function(superClass) {
      extend(Nodes, superClass);

      function Nodes(data) {
        this.name = 'ships';
        Nodes.__super__.constructor.call(this);
        return;
      }

      Nodes.prototype.findClosePorts = function(ship) {
        var allPorts, ports;
        allPorts = app.getCollection('nodes').ports;
        ports = [];
        _.each(allPorts, (function(_this) {
          return function(port, p) {
            return ports.push({
              'id': port,
              'distance': app.getDistanceOfNodes(ship.stops[0], port)
            });
          };
        })(this));
        console.log(_.orderBy(ports, 'distance'));
      };

      Nodes.prototype.stopToRest = function(ship) {
        if ((ship.nextDistance / 1000) / ship.energy < 2000) {
          return findClosePorts;
        }
      };

      Nodes.prototype.createShip = function() {
        this.addGeometry(new Ship());
      };

      Nodes.prototype.registerGeometries = function() {};

      return Nodes;

    })(Collection);
  });

}).call(this);
