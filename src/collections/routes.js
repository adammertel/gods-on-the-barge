// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Routes', ['Base', 'Collection', 'Route'], function(Base, Collection, Route) {
    var Routes;
    return Routes = (function(superClass) {
      extend(Routes, superClass);

      function Routes(data) {
        console.log('routes');
        this.name = 'routes';
        Routes.__super__.constructor.call(this, data);
        return;
      }

      Routes.prototype.registerGeometries = function() {
        var nodes;
        nodes = app.getCollection('nodes').data;
        _.each(_.keys(this.data), (function(_this) {
          return function(edge, e) {
            var from, fromNode, fromTo, to, toNode;
            fromTo = edge.split('-');
            fromNode = nodes[parseInt(fromTo[0])];
            toNode = nodes[parseInt(fromTo[1])];
            from = app.coordinateToMap({
              lon: fromNode.x,
              lat: fromNode.y
            });
            to = app.coordinateToMap({
              lon: toNode.x,
              lat: toNode.y
            });
            return _this.addGeometry(new Route(from, to));
          };
        })(this));
      };

      Routes.prototype.getDistanceOfEdge = function(from, to) {
        var alt1, alt2, distance;
        alt1 = from + '-' + to;
        alt2 = to + '-' + from;
        distance = false;
        if (this.data[alt1]) {
          distance = this.data[alt1];
        } else if (this.data[alt2]) {
          distance = this.data[alt2];
        }
        return distance;
      };

      return Routes;

    })(Collection);
  });

}).call(this);
