// Generated by CoffeeScript 1.10.0
(function() {
  define('App', ['Base', 'Ship'], function(Base, Ship) {
    return window.app = {
      state: {
        game: {
          time: {
            timeSpeed: 1,
            year: 400,
            month: 1,
            frameInterval: 0.001
          }
        },
        fps: [],
        lastTimeLoop: null,
        view: {
          h: 700,
          w: 800
        },
        map: {
          h: 0,
          w: 0
        },
        zoom: 0.5,
        zoomStep: 0.1,
        minZoom: 0.3,
        maxZoom: 10,
        position: {
          x: 0,
          y: 300
        },
        controls: {
          up: false,
          down: false,
          right: false,
          left: false,
          mouseClicked: false,
          mouseClickedPosition: {},
          mousePosition: {}
        },
        pxDensity: 400,
        boundingCoordinates: {
          n: 41,
          s: 30,
          e: 32,
          w: 22
        }
      },
      collections: [],
      getPath: function(start, end) {
        var alt1, alt2, path, pathData;
        alt1 = start + '-' + end;
        alt2 = end + '-' + start;
        path = false;
        if (this.linksData[alt1]) {
          path = this.linksData[alt1];
        } else if (this.linksData[alt2]) {
          pathData = _.clone(this.linksData[alt2]);
          path = _.reverse(pathData);
        }
        return path;
      },
      registerCollection: function(collection, z) {
        this.collections.push({
          'collection': collection,
          'z': z
        });
      },
      getCollection: function(collectionName) {
        var foundCollection;
        foundCollection = false;
        _.each(this.collections, function(collection, c) {
          if (collection.collection.name === collectionName) {
            return foundCollection = collection.collection;
          }
        });
        return foundCollection;
      },
      newMonth: function() {
        app.getCollection('ships').createShip();
      },
      changeTime: function() {
        var lastFrame;
        lastFrame = _.clone(this.state.game.time.month);
        this.state.game.time.month += this.state.game.time.timeSpeed * this.state.game.time.frameInterval;
        if (_.floor(lastFrame) !== _.floor(this.state.game.time.month)) {
          console.log('new month');
          this.newMonth();
        }
        if (this.state.game.time.month > 13) {
          console.log('new year');
          this.state.game.time.year -= 1;
          this.state.game.time.month = 1;
          this.newYear();
        }
      },
      newYear: function() {
        app.getCollection('ships').createShip();
      },
      draw: function() {
        this.changeTime();
        _.each(_.orderBy(this.collections, 'z'), (function(_this) {
          return function(collection, c) {
            return collection.collection.draw();
          };
        })(this));
        this.drawBorders();
        this.writeInfo();
      },
      clear: function() {
        this.ctx.clearRect(0, 0, this.state.view.w, this.state.view.h);
      },
      calculateMap: function() {
        var c;
        c = this.state.boundingCoordinates;
        this.state.map.h = (c.n - c.s) * this.state.pxDensity;
        this.state.map.w = (c.e - c.w) * this.state.pxDensity;
        this.state.pxkm = this.state.pxDensity / 110;
      },
      goTo: function(coordinate) {
        this.state.position.x = coordinate.x;
        this.state.position.y = coordinate.y;
      },
      writeInfo: function() {
        this.ctx.fillStyle = 'black';
        this.ctx.fillText('x: ' + this.state.position.x + ' y: ' + this.state.position.y + ' zoom: ' + this.state.zoom, 10, 10);
        this.ctx.fillText('fps : ' + parseInt(_.mean(this.state.fps)), 10, 40);
      },
      getClicked: function() {
        var clicked, g, i, len, ref;
        clicked = falsecd;
        ref = this.state.geometries;
        for (i = 0, len = ref.length; i < len; i++) {
          g = ref[i];
          if (g.isClicked()) {
            clicked = g;
          }
        }
        return clicked;
      },
      getMousePosition: function() {
        return {
          x: this.state.position.x,
          y: this.state.position.y
        };
      },
      isPointVisible: function(point) {
        return point.x < this.state.view.w && point.x > 0 && point.y < this.state.view.h && point.y > 0;
      },
      drawBorders: function() {
        this.ctx.lineWidth = 5;
        this.ctx.strokeStyle = 'black';
        this.ctx.strokeRect((0 - this.state.position.x) * this.state.zoom, (0 - this.state.position.y) * this.state.zoom, this.state.map.w * this.state.zoom, this.state.map.h * this.state.zoom);
      },
      coordinateToMap: function(c) {
        return {
          x: (c.lon - this.state.boundingCoordinates.w) * this.state.pxDensity,
          y: this.state.map.h - (c.lat - this.state.boundingCoordinates.s) * this.state.pxDensity
        };
      },
      pointToUTM: function(point) {},
      setInteractions: function() {
        if (this.menu.mm.mouseConflict() && app.state.controls.mouseClicked) {
          this.menu.mm.mouseClick();
        }
      },
      coordinatesToView: function(coords) {
        return _.each(coords, (function(_this) {
          return function(coord, c) {
            return _this.coordinateToView(coord);
          };
        })(this));
      },
      coordinateToView: function(c) {
        return {
          x: (c.x - this.state.position.x) * this.state.zoom,
          y: (c.y - this.state.position.y) * this.state.zoom
        };
      },
      loop: function() {
        var now, nowValue;
        now = new Date();
        nowValue = now.valueOf();
        if (app.state.lastTimeLoop) {
          app.state.fps.push(parseInt(1 / (nowValue - app.state.lastTimeLoop) * 1000));
        }
        app.state.fps = _.takeRight(app.state.fps, 30);
        app.state.lastTimeLoop = nowValue;
        app.clear();
        app.draw();
        app.menu.draw();
        app.cursor.draw();
        app.checkPosition();
        app.setInteractions();
        window.requestAnimationFrame(app.loop);
      },
      checkPosition: function() {
        var p, step;
        step = 5;
        p = this.state.position;
        if (this.state.controls.left) {
          app.setNewXPosition(p.x - step);
        }
        if (this.state.controls.up) {
          app.setNewYPosition(p.y - step);
        }
        if (this.state.controls.right) {
          app.setNewXPosition(p.x + step);
        }
        if (this.state.controls.down) {
          app.setNewYPosition(p.y + step);
        }
      },
      setNewXPosition: function(newX) {
        this.state.position.x = _.clamp(newX, 0, this.state.map.w - (this.state.view.w / this.state.zoom));
      },
      setNewYPosition: function(newY) {
        this.state.position.y = _.clamp(newY, 0, this.state.map.h - (this.state.view.h / this.state.zoom));
      },
      mouseOverMap: function() {
        return !this.menu.mouseConflict();
      },
      zoomIn: function() {
        var h, s, w, z;
        if (this.state.zoom < this.state.maxZoom) {
          w = this.state.view.w;
          h = this.state.view.h;
          s = this.state.zoomStep;
          z = this.state.zoom;
          this.setNewXPosition(this.state.position.x + (w / z - (w / (z + s))) / 2);
          this.setNewYPosition(this.state.position.y + (w / z - (w / (z + s))) / 2);
          this.state.zoom = this.state.zoom + s;
        }
      },
      zoomOut: function() {
        var h, s, w, z;
        if (this.state.zoom > this.state.minZoom) {
          w = this.state.view.w;
          h = this.state.view.h;
          s = this.state.zoomStep;
          z = this.state.zoom;
          this.setNewXPosition(this.state.position.x + (w / z - (w / (z - s))) / 2);
          this.setNewYPosition(this.state.position.y + (w / z - (w / (z - s))) / 2);
          this.state.zoom = this.state.zoom - s;
        }
      }
    };
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Base', [], function() {
    var Base;
    return Base = {
      doXhr: function(link) {
        var xhr;
        xhr = new XMLHttpRequest;
        xhr.open('GET', link, false);
        xhr.send('');
        return xhr;
      },
      distance: function(c1, c2) {
        var dx, dy;
        dx = c1.x - c2.x;
        dy = c1.y - c2.y;
        return Math.sqrt(dx * dx + dy * dy);
      },
      moveTo: function(from, to, distance) {
        var d, dist, dist_new, dx, dy;
        dx = to.x - from.x;
        dy = to.y - from.y;
        dist = this.distance(to, from);
        dist_new = distance * app.state.pxkm;
        d = dist_new / dist;
        return {
          x: d * dx + from.x,
          y: d * dy + from.y
        };
      },
      pointInsidePolygon: function(polygon, mouseCoordinates) {
        var inside, polygonCoords, x, y;
        x = mouseCoordinates.x;
        y = mouseCoordinates.y;
        inside = false;
        polygonCoords = polygon.viewCoords;
        _.each(polygonCoords, (function(_this) {
          return function(p, i) {
            var intersect, j, q, xi, xj, yi, yj;
            j = i + 1;
            if (polygonCoords[j]) {
              q = polygonCoords[j];
              xi = p.x;
              yi = p.y;
              xj = q.x;
              yj = q.y;
              intersect = (yi > y) !== (yj > y) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
              if (intersect) {
                return inside = !inside;
              }
            }
          };
        })(this));
        return inside;
      },
      moveAtTheEndOfArray: function(array, index) {
        var item;
        item = array[index];
        array.splice(index, 1);
        array.push(item);
        return array;
      }
    };
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Collection', ['Base'], function(Base) {
    var Collection;
    return Collection = (function() {
      function Collection(data) {
        this.data = data;
        this.geometries = [];
      }

      Collection.prototype.addGeometry = function(geometry) {
        geometry.id = this.geometries.length;
        this.geometries.push(geometry);
      };

      Collection.prototype.draw = function() {
        _.each(this.geometries, function(geometry, g) {
          if (geometry) {
            return geometry.draw();
          }
        });
      };

      Collection.prototype.unregisterGeometry = function(id) {
        var spliceIndex;
        spliceIndex = false;
        _.each(this.geometries, (function(_this) {
          return function(geometry, g) {
            if (geometry.id === id) {
              return spliceIndex = g;
            }
          };
        })(this));
        if (spliceIndex !== false) {
          this.geometries.splice(spliceIndex, 1);
        }
      };

      return Collection;

    })();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Islands', ['Base', 'Collection', 'Island'], function(Base, Collection, Island) {
    var Islands;
    return Islands = (function(superClass) {
      extend(Islands, superClass);

      function Islands(data) {
        this.name = 'islands';
        Islands.__super__.constructor.call(this, data);
        return;
      }

      Islands.prototype.registerGeometries = function() {
        _.each(this.data, (function(_this) {
          return function(island, i) {
            var coords;
            coords = [];
            _.each(island.coordinates[0], function(coord, c) {
              return coords.push(app.coordinateToMap({
                lon: coord[0],
                lat: coord[1]
              }));
            });
            return _this.addGeometry(new Island(coords, island));
          };
        })(this));
      };

      return Islands;

    })(Collection);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Nodes', ['Base', 'Collection', 'Port'], function(Base, Collection, Port) {
    var Nodes;
    return Nodes = (function(superClass) {
      extend(Nodes, superClass);

      function Nodes(data) {
        this.name = 'nodes';
        Nodes.__super__.constructor.call(this, data);
        return;
      }

      Nodes.prototype.limitConflict = 10;

      Nodes.prototype.registerGeometries = function() {
        _.each(_.keys(this.data), (function(_this) {
          return function(nodeId, n) {
            var islandValue;
            islandValue = _this.data[nodeId];
            return _this.addGeometry(new Port(app.coordinateToMap({
              lon: islandValue.x,
              lat: islandValue.y
            }), nodeId, islandValue.island));
          };
        })(this));
      };

      Nodes.prototype.getNode = function(id) {
        return this.data[id];
      };

      Nodes.prototype.nodeMapCoordinates = function(id) {
        var node;
        node = this.getNode(id);
        return app.coordinateToMap({
          lon: node.x,
          lat: node.y
        });
      };

      Nodes.prototype.checkConflict = function(id, coords) {
        return Base.distance(this.nodeMapCoordinates(id), coords) < this.limitConflict;
      };

      Nodes.prototype.getIdOfNode = function(node) {
        var id;
        id = false;
        _.each(_.keys(this.data), (function(_this) {
          return function(nodeKey, k) {
            if (_this.data[nodeKey].x === node.x) {
              return id = nodeKey;
            }
          };
        })(this));
        return id;
      };

      Nodes.prototype.getNodesOnIsland = function(islandName) {
        return _.filter(this.data, function(node, n) {
          return node.island === islandName;
        });
      };

      Nodes.prototype.chooseShipStartingNodeId = function() {
        return this.getIdOfNode(_.sample(this.getShipStartingNodes()));
      };

      Nodes.prototype.chooseShipEndingNodeId = function() {
        return this.getIdOfNode(_.sample(this.getShipEndingNodes()));
      };

      Nodes.prototype.getShipStartingNodes = function() {
        return this.getNodesOnIsland('Egypt');
      };

      Nodes.prototype.getShipEndingNodes = function() {
        return _.union(this.getNodesOnIsland('Greece'), this.getNodesOnIsland('Turkey'));
      };

      return Nodes;

    })(Collection);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Routes', ['Base', 'Collection', 'Route'], function(Base, Collection, Route) {
    var Routes;
    return Routes = (function(superClass) {
      extend(Routes, superClass);

      function Routes(data) {
        console.log('routes');
        this.name = 'routes';
        Routes.__super__.constructor.call(this, data);
        return;
      }

      Routes.prototype.registerGeometries = function() {
        var nodes;
        nodes = app.getCollection('nodes').data;
        _.each(_.keys(this.data), (function(_this) {
          return function(edge, e) {
            var from, fromNode, fromTo, to, toNode;
            fromTo = edge.split('-');
            fromNode = nodes[parseInt(fromTo[0])];
            toNode = nodes[parseInt(fromTo[1])];
            from = app.coordinateToMap({
              lon: fromNode.x,
              lat: fromNode.y
            });
            to = app.coordinateToMap({
              lon: toNode.x,
              lat: toNode.y
            });
            return _this.addGeometry(new Route(from, to));
          };
        })(this));
      };

      return Routes;

    })(Collection);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Ships', ['Base', 'Collection', 'Ship'], function(Base, Collection, Ship) {
    var Nodes;
    return Nodes = (function(superClass) {
      extend(Nodes, superClass);

      function Nodes(data) {
        this.name = 'ships';
        Nodes.__super__.constructor.call(this);
        return;
      }

      Nodes.prototype.createShip = function() {
        this.addGeometry(new Ship());
      };

      Nodes.prototype.registerGeometries = function() {};

      return Nodes;

    })(Collection);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  require(['App'], function(app) {
    window.addEventListener('keydown', function(e) {
      if (e.keyCode === 37) {
        app.state.controls.left = true;
      }
      if (e.keyCode === 38) {
        app.state.controls.up = true;
      }
      if (e.keyCode === 39) {
        app.state.controls.right = true;
      }
      if (e.keyCode === 40) {
        app.state.controls.down = true;
      }
      if (e.keyCode === 33) {
        app.zoomIn();
      }
      if (e.keyCode === 34) {
        return app.zoomOut();
      }
    }, false);
    return window.addEventListener('keyup', function(e) {
      if (e.keyCode === 37) {
        app.state.controls.left = false;
      }
      if (e.keyCode === 38) {
        app.state.controls.up = false;
      }
      if (e.keyCode === 39) {
        app.state.controls.right = false;
      }
      if (e.keyCode === 40) {
        return app.state.controls.down = false;
      }
    }, false);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Cursor', ['App', 'Base'], function(app, Base) {
    var Cursor;
    return Cursor = (function() {
      function Cursor() {}

      Cursor.prototype.getPosition = function() {
        return {
          x: (this.x - app.state.position.x) * app.state.zoom,
          y: (this.y - app.state.position.y) * app.state.zoom
        };
      };

      Cursor.prototype.draw = function() {
        var mp;
        mp = app.state.controls.mousePosition;
        app.ctx.beginPath();
        app.ctx.moveTo(mp.x, mp.y);
        app.ctx.lineTo(mp.x, mp.y + 10);
        app.ctx.lineTo(mp.x + 3, mp.y + 7);
        app.ctx.lineTo(mp.x + 8, mp.y + 12);
        app.ctx.lineTo(mp.x + 9, mp.y + 11);
        app.ctx.lineTo(mp.x + 4, mp.y + 6);
        app.ctx.lineTo(mp.x + 8, mp.y + 3);
        app.ctx.closePath();
        app.ctx.fillStyle = 'black';
        return app.ctx.fill();
      };

      return Cursor;

    })();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  require(['App', 'Base', 'Island', 'Rectangle', 'MiniMap', 'Cursor', 'Route', 'Port', 'Ship', 'Islands', 'Nodes', 'Ships', 'Routes', 'Menu'], function(app, Base, Island, Rectangle, MiniMap, Cursor, Route, Port, Ship, Islands, Nodes, Ships, Routes, Menu) {
    var canvas;
    console.log('init');
    canvas = document.getElementById('game');
    canvas.width = app.state.view.w;
    canvas.height = app.state.view.h;
    app.ctx = canvas.getContext('2d');
    app.calculateMap();
    app.linksData = JSON.parse(Base.doXhr('data/links.json').responseText);
    app.registerCollection(new Islands(JSON.parse(Base.doXhr('data/islands.json').responseText)), 1);
    app.registerCollection(new Nodes(JSON.parse(Base.doXhr('data/nodes.json').responseText)), 3);
    app.registerCollection(new Routes(JSON.parse(Base.doXhr('data/edges.json').responseText)), 2);
    app.getCollection('islands').registerGeometries();
    app.getCollection('routes').registerGeometries();
    app.menu = new Menu();
    app.cursor = new Cursor();
    app.registerCollection(new Ships([], 10));
    app.getCollection('ships').createShip();
    app.loop();
    canvas.addEventListener('mousedown', function(e) {
      app.state.controls.mouseClicked = true;
      app.state.controls.mouseClickedPosition = {
        x: e.clientX,
        y: e.clientY
      };
    });
    canvas.addEventListener('mouseup', function(e) {
      app.state.controls.mouseClicked = false;
    });
    canvas.addEventListener('mousemove', function(e) {
      var mcp, zoom;
      app.state.controls.mousePosition = {
        x: e.clientX,
        y: e.clientY
      };
      if (app.state.controls.mouseClicked && app.mouseOverMap()) {
        zoom = app.state.zoom;
        mcp = app.state.controls.mouseClickedPosition;
        app.setNewYPosition(app.state.position.y + (mcp.y - e.clientY) * 1 / zoom);
        app.setNewXPosition(app.state.position.x + (mcp.x - e.clientX) * 1 / zoom);
        app.state.controls.mouseClickedPosition = {
          x: e.clientX,
          y: e.clientY
        };
      }
    });
    return canvas.addEventListener('mouseout', function(e) {
      app.state.controls.mouseClicked = false;
      app.state.controls.mouseClickedPosition = {
        x: e.clientX,
        y: e.clientY
      };
    });
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Geography', ['Geometry'], function(Geometry) {
    var Geography;
    return Geography = (function(superClass) {
      extend(Geography, superClass);

      function Geography() {
        return;
      }

      Geography.prototype.getCoords = function() {
        this.viewCoords = this.calculateCoords();
      };

      return Geography;

    })(Geometry);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Geometry', ['Base'], function(Base) {
    var Geometry;
    return Geometry = (function() {
      function Geometry(coords, size, props) {
        this.coords = coords;
        this.size = size;
        this.props = _.assign({
          color: '#666',
          minZoom: 1
        }, props);
        this.rotation = 0;
        this.loadSprite();
        this.loadImage();
        return;
      }

      Geometry.prototype.mouseConflict = function() {
        return false;
      };

      Geometry.prototype.changeColor = function(newColor) {
        this.svg = this.svg.replace(new RegExp(this.color, 'g'), newColor);
        this.color = newColor;
        this.loadImage();
      };

      Geometry.prototype.rotate = function() {
        this.svg = this.svg.replace(new RegExp(/rotate\((\d*)/), 'rotate(' + this.rotation);
        console.log(this.svg);
        this.lastRotation = this.rotation;
      };

      Geometry.prototype.getCoords = function() {
        var hSize;
        hSize = (this.size.w * app.state.zoom) / 2;
        return [
          {
            x: this.coords.x - hSize,
            y: this.coords.y - hSize
          }, {
            x: this.coords.x - hSize,
            y: this.coords.y + hSize
          }, {
            x: this.coords.x + hSize,
            y: this.coords.y + hSize
          }, {
            x: this.coords.x + hSize,
            y: this.coords.y + hSize
          }
        ];
      };

      Geometry.prototype.loadImage = function() {
        this.img = new Image();
        this.img.src = 'data:image/svg+xml;base64,' + btoa(this.svg);
      };

      Geometry.prototype.getPosition = function() {
        return {
          x: (this.x - app.state.position.x) * app.state.zoom,
          y: (this.y - app.state.position.y) * app.state.zoom
        };
      };

      Geometry.prototype.draw = function() {
        var sizeH, sizeW;
        if (app.state.zoom >= this.props.minZoom) {
          sizeW = this.size.w * app.state.zoom;
          sizeH = this.size.h * app.state.zoom;
          if (this.rotation && this.sprite) {
            app.ctx.translate(this.shipCoord.x, this.shipCoord.y);
            app.ctx.rotate(this.rotation);
          }
          app.ctx.drawImage(this.img, -sizeW / 2, -sizeH / 2, sizeW, sizeH);
          if (this.rotation && this.sprite) {
            app.ctx.rotate(-this.rotation);
            app.ctx.translate(-this.shipCoord.x, -this.shipCoord.y);
          }
        }
      };

      Geometry.prototype.loadSprite = function() {
        var xhr;
        if (this.sprite) {
          xhr = Base.doXhr('./sprites/' + this.sprite + '.svg');
          this.svg = new XMLSerializer().serializeToString(xhr.responseXML.documentElement);
        }
      };

      return Geometry;

    })();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Island', ['App', 'Geography', 'Base'], function(app, Geography, Base) {
    var Island;
    return Island = (function(superClass) {
      extend(Island, superClass);

      function Island(coords, data) {
        this.coords = coords;
        if (data.population) {
          this.data = data;
        } else {
          this.data = null;
        }
        Island.__super__.constructor.call(this);
        return;
      }

      Island.prototype.calculateCoords = function() {
        var viewCoords;
        viewCoords = [];
        _.each(this.coords, (function(_this) {
          return function(coord, c) {
            var viewCoord;
            viewCoord = app.coordinateToView({
              x: coord.x,
              y: coord.y
            });
            return viewCoords.push(viewCoord);
          };
        })(this));
        return viewCoords;
      };

      Island.prototype.getCoords = function() {
        this.viewCoords = this.calculateCoords();
      };

      Island.prototype.mouseConflict = function() {
        return Base.pointInsidePolygon(this, app.state.controls.mousePosition);
      };

      Island.prototype.drawInfo = function() {
        var index, mouseX, mouseY;
        index = _.indexOf(app.state.geometries, this);
        app.state.geometries = Base.moveAtTheEndOfArray(app.state.geometries, index);
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        app.ctx.fillStyle = '#444';
        app.ctx.fillRect(mouseX + 10, mouseY + 5, 200, 100);
        app.ctx.fillStyle = 'white';
        app.ctx.fillText('name : ' + this.data.name, mouseX + 20, mouseY + 20);
        return app.ctx.fillText('population : ' + this.data.population, mouseX + 20, mouseY + 35);
      };

      Island.prototype.draw = function() {
        this.getCoords();
        if (this.data) {
          app.ctx.fillStyle = '#777';
          app.ctx.beginPath();
          _.each(this.viewCoords, (function(_this) {
            return function(viewCoord, c) {
              if (c === 0) {
                return app.ctx.moveTo(viewCoord.x, viewCoord.y);
              } else {
                return app.ctx.lineTo(viewCoord.x, viewCoord.y);
              }
            };
          })(this));
          app.ctx.closePath();
          app.ctx.fill();
          if (this.over) {
            app.ctx.fillStyle = '#555';
            app.ctx.fill();
            this.drawInfo();
          }
        } else {
          app.ctx.fillStyle = '#aaa';
          app.ctx.beginPath();
          _.each(this.viewCoords, (function(_this) {
            return function(viewCoord, c) {
              if (c === 0) {
                return app.ctx.moveTo(viewCoord.x, viewCoord.y);
              } else {
                return app.ctx.lineTo(viewCoord.x, viewCoord.y);
              }
            };
          })(this));
          app.ctx.closePath();
          app.ctx.fill();
        }
      };

      return Island;

    })(Geography);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Port', ['Geography', 'Base'], function(Geography, Base) {
    var Port;
    return Port = (function(superClass) {
      extend(Port, superClass);

      function Port(coord, nodeId, name) {
        this.coord = coord;
        this.nodeId = nodeId;
        this.name = name;
        Port.__super__.constructor.call(this);
        return;
      }

      Port.prototype.draw = function() {
        var portCoord, radius;
        portCoord = app.coordinateToView(this.coord);
        if (this.name) {
          app.ctx.fillStyle = 'red';
          radius = 5;
        } else {
          app.ctx.fillStyle = 'black';
          radius = 3;
        }
        app.ctx.beginPath();
        app.ctx.arc(portCoord.x, portCoord.y, radius * app.state.zoom, 0, 2 * Math.PI, false);
        app.ctx.fill();
        app.ctx.fillText(this.nodeId, portCoord.x + 10, portCoord.y + 10);
      };

      return Port;

    })(Geography);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Rectangle', ['Geometry'], function(Geometry) {
    var Rectangle;
    return Rectangle = (function(superClass) {
      extend(Rectangle, superClass);

      function Rectangle(x, y, h, w, props, color) {
        Rectangle.__super__.constructor.call(this, x, y, h, w, props);
        this.color = '#666';
        this.changeColor(color);
      }

      Rectangle.prototype.draw = function() {
        return Rectangle.__super__.draw.apply(this, arguments);
      };

      Rectangle.prototype.sprite = 'rectangle';

      return Rectangle;

    })(Geometry);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Route', ['App', 'Geography', 'Base'], function(app, Geography, Base) {
    var Route;
    return Route = (function(superClass) {
      extend(Route, superClass);

      function Route(from, to) {
        this.from = from;
        this.to = to;
        this.speed = 5;
        Route.__super__.constructor.call(this);
        return;
      }

      Route.prototype.draw = function() {
        var fromView, toView;
        fromView = app.coordinateToView(this.from);
        toView = app.coordinateToView(this.to);
        app.ctx.strokeStyle = 'black';
        app.ctx.lineWidth = 1;
        app.ctx.beginPath();
        app.ctx.moveTo(fromView.x, fromView.y);
        app.ctx.lineTo(toView.x, toView.y);
        app.ctx.stroke();
      };

      return Route;

    })(Geography);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('Ship', ['Geometry', 'Base'], function(Geometry, Base) {
    var Ship;
    return Ship = (function(superClass) {
      extend(Ship, superClass);

      function Ship() {
        this.collectionName = 'ships';
        this.startId = app.getCollection('nodes').chooseShipStartingNodeId();
        this.endId = app.getCollection('nodes').chooseShipEndingNodeId();
        this.baseSpeed = 1;
        Ship.__super__.constructor.call(this, app.getCollection('nodes').nodeMapCoordinates(this.startId), {
          w: 15,
          h: 40
        }, {
          minZoom: 0.4
        });
        this.calculateStops();
        this.fullEnergy = 2000;
        this.energy = this.fullEnergy;
        return;
      }

      Ship.prototype.calculateStops = function() {
        this.stops = app.getPath(this.startId, this.endId);
        this.stops.push(parseInt(this.endId));
        this.nextStop = app.getCollection('nodes').nodeMapCoordinates(this.stops[0]);
        this.rotation = this.calculateRotation();
      };

      Ship.prototype.move = function() {
        this.energy -= .5;
        if (this.energy < 0) {
          this.suicide();
        }
        if (app.getCollection('nodes').checkConflict(this.stops[0], this.coords)) {
          if (this.stops.length > 1) {
            this.stops = _.slice(this.stops, 1);
            this.nextStop = app.getCollection('nodes').nodeMapCoordinates(this.stops[0]);
            this.rotation = this.calculateRotation();
          } else {
            this.suicide();
          }
        }
        return this.coords = Base.moveTo(this.coords, this.nextStop, this.getSpeed());
      };

      Ship.prototype.calculateRotation = function() {
        var dx, dy, theta;
        dy = this.coords.y - this.nextStop.y;
        dx = this.nextStop.x - this.coords.x;
        theta = Math.atan2(-dy, dx);
        if (theta < 0) {
          theta += 2 * Math.PI;
        }
        if (theta > 3 / 2 * Math.PI) {
          theta -= 3 / 2 * Math.PI;
        } else {
          theta += Math.PI / 2;
        }
        return theta;
      };

      Ship.prototype.getSpeed = function() {
        return this.baseSpeed * app.state.game.time.timeSpeed;
      };

      Ship.prototype.drawEnergyBar = function() {
        var energypx, fullEnergypx;
        fullEnergypx = 60;
        energypx = (fullEnergypx / this.fullEnergy) * this.energy;
        app.ctx.strokeStyle = 'black';
        app.ctx.fillStyle = 'red';
        app.ctx.strokeRect(this.shipCoord.x - 30, this.shipCoord.y - 30, fullEnergypx, 5);
        return app.ctx.fillRect(this.shipCoord.x - 30, this.shipCoord.y - 30, energypx, 5);
      };

      Ship.prototype.draw = function() {
        this.shipCoord = app.coordinateToView(this.coords);
        this.move();
        this.drawEnergyBar();
        Ship.__super__.draw.call(this);
      };

      Ship.prototype.suicide = function() {
        app.getCollection(this.collectionName).unregisterGeometry(this.id);
      };

      Ship.prototype.sprite = 'ship';

      return Ship;

    })(Geometry);
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Button', ['App'], function(app) {
    var Button;
    return Button = (function() {
      function Button(id, position, text, action, styles, active) {
        this.id = id;
        this.text = text;
        this.action = action;
        this.styles = styles;
        this.active = active;
        this.h = position.h;
        this.w = position.w;
        this.x = position.x;
        this.y = position.y;
      }

      Button.prototype.draw = function() {
        this.style = this.active ? this.styles.active : this.styles.inactive;
        app.ctx.lineWidth = this.style.lw;
        app.ctx.fillStyle = this.style.fill;
        app.ctx.font = 'bold 8pt Calibri';
        app.ctx.fillRect(this.x, this.y - this.style.lw, this.w, this.h);
        app.ctx.strokeRect(this.x, this.y - this.style.lw, this.w, this.h);
        app.ctx.fillStyle = this.style.text;
        app.ctx.fillText(this.text(), this.x + 8, this.y + 16);
      };

      Button.prototype.isClicked = function() {
        var mouseX, mouseY;
        if (this.action && app.state.controls.mouseClicked) {
          mouseX = app.state.controls.mousePosition.x;
          mouseY = app.state.controls.mousePosition.y;
          if (mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h) {
            this.action();
          }
        }
      };

      Button.prototype.activate = function() {
        this.active = true;
      };

      Button.prototype.deactivate = function() {
        this.active = false;
      };

      return Button;

    })();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Menu', ['App', 'MiniMap', 'Text', 'Button'], function(app, MiniMap, Text, Button) {
    var Menu;
    return Menu = (function() {
      function Menu() {
        this.h = 150;
        this.w = app.state.view.w;
        this.x = 0;
        this.y = app.state.view.h - this.h;
        this.mm = new MiniMap();
        this.lw = 2;
        this.texts = [];
        this.buttons = [];
        this.init();
        return;
      }

      Menu.prototype.buttonStyles = {
        speed: {
          inactive: {
            stroke: 'black',
            fill: 'white',
            text: 'black',
            lw: 2
          },
          active: {
            stroke: 'black',
            fill: 'grey',
            text: 'black',
            lw: 2
          }
        }
      };

      Menu.prototype.init = function() {
        var bs, gameSpeed;
        bs = _.clone(this.buttonStyles);
        this.registerText('datum', {
          x: this.w - this.mm.w - 200,
          y: this.h - 25 + this.y
        }, this.getDatumValue);
        gameSpeed = app.state.game.time.timeSpeed;
        this.registerButton('speed0', {
          x: this.w - this.mm.w - 75,
          y: this.h - 25 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '||'), this.changeSpeed0.bind(this), bs['speed'], gameSpeed === 0);
        this.registerButton('speed1', {
          x: this.w - this.mm.w - 50,
          y: this.h - 25 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '>'), this.changeSpeed1.bind(this), bs['speed'], gameSpeed === 1);
        this.registerButton('speed2', {
          x: this.w - this.mm.w - 25,
          y: this.h - 25 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '>>'), this.changeSpeed2.bind(this), bs['speed'], gameSpeed === 2);
        this.registerButton('zoomIn', {
          x: this.w - this.mm.w - 25,
          y: this.h - 50 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '+'), this.zoomIn.bind(this), bs['speed'], gameSpeed === 2);
        this.registerButton('zoomOut', {
          x: this.w - this.mm.w - 50,
          y: this.h - 50 + this.y,
          w: 25,
          h: 25
        }, this.makeStaticText.bind(this, '-'), this.zoomOut.bind(this), bs['speed'], gameSpeed === 2);
      };

      Menu.prototype.changeSpeed0 = function() {
        this.getButton('speed0').activate();
        this.getButton('speed1').deactivate();
        this.getButton('speed2').deactivate();
        app.state.game.time.timeSpeed = 0;
      };

      Menu.prototype.changeSpeed1 = function() {
        this.getButton('speed0').deactivate();
        this.getButton('speed1').activate();
        this.getButton('speed2').deactivate();
        app.state.game.time.timeSpeed = 1;
      };

      Menu.prototype.changeSpeed2 = function() {
        this.getButton('speed0').deactivate();
        this.getButton('speed1').deactivate();
        this.getButton('speed2').activate();
        app.state.game.time.timeSpeed = 2;
      };

      Menu.prototype.zoomOut = function() {
        app.zoomOut();
      };

      Menu.prototype.zoomIn = function() {
        app.zoomIn();
      };

      Menu.prototype.makeStaticText = function(text) {
        return text;
      };

      Menu.prototype.getDatumValue = function() {
        return 'year: ' + app.state.game.time.year + ' BC, month: ' + _.floor(app.state.game.time.month);
      };

      Menu.prototype.getButton = function(buttonId) {
        return _.find(this.buttons, (function(_this) {
          return function(button) {
            return button.id === buttonId;
          };
        })(this));
      };

      Menu.prototype.draw = function() {
        _.each(this.buttons, (function(_this) {
          return function(button, b) {
            return button.isClicked();
          };
        })(this));
        app.ctx.lineWidth = this.lw;
        app.ctx.fillStyle = 'white';
        app.ctx.strokeStyle = 'black';
        app.ctx.fillRect(this.x, this.y, this.w, this.h);
        app.ctx.strokeRect(this.x + this.lw / 2, this.y + this.lw / 2, this.w - this.lw, this.h - this.lw);
        _.each(this.texts, (function(_this) {
          return function(text, t) {
            return text.draw();
          };
        })(this));
        _.each(this.buttons, (function(_this) {
          return function(button, b) {
            return button.draw();
          };
        })(this));
        this.mm.draw();
      };

      Menu.prototype.mouseConflict = function() {
        var mouseX, mouseY;
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        return mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h;
      };

      Menu.prototype.registerText = function(id, position, text) {
        this.texts.push(new Text(id, position, text));
      };

      Menu.prototype.registerButton = function(id, position, text, action, style, active) {
        this.buttons.push(new Button(id, position, text, action, style, active));
      };

      return Menu;

    })();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('MiniMap', ['App'], function(app) {
    var MiniMap;
    return MiniMap = (function() {
      function MiniMap() {
        this.h = 150;
        this.w = app.state.map.w / app.state.map.h * this.h;
        this.x = app.state.view.w - this.w;
        this.y = app.state.view.h - this.h;
        this.lw = 2;
        this.dx = this.w / app.state.map.w;
        this.dy = this.h / app.state.map.h;
        return;
      }

      MiniMap.prototype.coordinateToMiniMap = function(c) {
        return {
          x: this.x + this.dx * c.x,
          y: this.y + this.dy * c.y
        };
      };

      MiniMap.prototype.draw = function() {
        var islands, mh, mmCoord, mw, x1, y1;
        app.ctx.save();
        app.ctx.fillStyle = 'white';
        app.ctx.fillRect(this.x, this.y, this.w, this.h);
        app.ctx.lineWidth = this.lw;
        app.ctx.strokeStyle = 'black';
        app.ctx.beginPath();
        app.ctx.moveTo(this.x, this.y);
        app.ctx.lineTo(this.x + this.w, this.y);
        app.ctx.lineTo(this.x + this.w, this.y + this.h);
        app.ctx.lineTo(this.x, this.y + this.h);
        app.ctx.closePath();
        app.ctx.clip();
        islands = app.getCollection('islands');
        _.each(islands.geometries, (function(_this) {
          return function(islandGeometry) {
            app.ctx.fillStyle = 'grey';
            app.ctx.beginPath();
            _.each(islandGeometry.coords, function(coord, c) {
              var mmCoord;
              mmCoord = _this.coordinateToMiniMap({
                x: coord.x,
                y: coord.y
              });
              if (c === 0) {
                return app.ctx.moveTo(mmCoord.x, mmCoord.y);
              } else {
                return app.ctx.lineTo(mmCoord.x, mmCoord.y);
              }
            });
            app.ctx.closePath();
            return app.ctx.fill();
          };
        })(this));
        app.ctx.restore();
        app.ctx.strokeRect(this.x + this.lw / 2, this.y + this.lw / 2, this.w - this.lw, this.h - this.lw);
        app.ctx.fillStyle = 'grey';
        x1 = this.dx * app.state.position.x;
        y1 = this.dy * app.state.position.y;
        mmCoord = this.coordinateToMiniMap({
          x: app.state.position.x,
          y: app.state.position.y
        });
        mw = this.dx * app.state.view.w / app.state.zoom - 2 * this.lw;
        mh = this.dy * app.state.view.h / app.state.zoom - 2 * this.lw;
        app.ctx.strokeRect(mmCoord.x + this.lw, mmCoord.y + this.lw, mw, mh);
      };

      MiniMap.prototype.mouseConflict = function() {
        var mouseX, mouseY;
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        return mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h;
      };

      MiniMap.prototype.mouseClick = function() {
        var mouseX, mouseY;
        mouseX = app.state.controls.mousePosition.x;
        mouseY = app.state.controls.mousePosition.y;
        app.setNewXPosition(((mouseX - this.x) / this.w * app.state.map.w) - app.state.view.w / 2);
        return app.setNewYPosition(((mouseY - this.y) / this.h * app.state.map.h) - app.state.view.h / 2);
      };

      return MiniMap;

    })();
  });

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  define('Text', ['App'], function(app) {
    var Text;
    return Text = (function() {
      function Text(id, position, text) {
        this.id = id;
        this.text = text;
        this.x = position.x;
        this.y = position.y;
      }

      Text.prototype.draw = function() {
        app.ctx.fillStyle = 'black';
        app.ctx.fillText(this.text(), this.x, this.y + 8);
      };

      return Text;

    })();
  });

}).call(this);
